<?php

namespace idapp\rbac;

use app\models\User;
use idapp\rbac\services\PermissionService;
use Yii;
use yii\helpers\StringHelper;
use yii\web\ForbiddenHttpException;


/**
 * Class AccessControl
 * @package app\kernel\components\filters
 *
 * Это класс, расширяющий AccessControll и дающий следующие преимущества:
 * 1. К каждому действию/контроллеру/модулю можно получить доступ, имея на то соответствующее разрешение.
 * Все разрешения хранятся в особых Группах (таблица system_groups) в формате json;
 * Если пользователь входит в нужную группу с разрешением, то может получить доступ к странице.
 *
 * ['actions' => ['sign-out', 'update', 'view'],
 * 'roles' => ['@']
 * ]
 * Настройка доступа реализуется через Фильтр в поведении Модуля/Контроллера

 * Правило применяется ко всем контроллерам, но не ко всем действиям
[
'rule' => Permission::SYSTEM_ACCESS_FOLDERS,
'route' => [
'controllers' => [],
'actions' => [
'index'
],
]
],
 * Правило применяется не ко всем контроллерам и не ко всем действиям
[
'rule' => Permission::SYSTEM_UPLOAD_FILE,
'route' => [
'controllers' => [
[
'controller' => 'app\modules\admin\controllers\UserController',
'allow' => true
],
[
'controller' => 'app\modules\admin\controllers\DefaultController',
'allow' => false
],
],
'actions' => [
'index'
],
]
]
 */

class AccessControl extends \yii\filters\AccessControl
{

    public array $permissionsMap = [];
    public string $currentClassController;
    public PermissionService $permissionService;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->permissionService = \Yii::createObject(PermissionService::class);
    }

    public function authorize()
    {
        $this->permissionsMap = array_reverse($this->permissionsMap);

        /**
         * Обрабатываем каждый элемент Карты
         */
        foreach ($this->permissionsMap as $item) {

            /**
             * Фильтр действий: если текущее действие совпадает с действием из Карты разрешений, то продолжаем проверку прав доступа,
             * если нет, то правила не применять.
             */

            /**
             * Если контроллеры не заданы, применять правило для всех контроллеров, иначе обрабатывать каждый указанный;
             */
            if(empty($item['route']['controllers'])) {
                if ($this->permissionService->checkAccess($item['rule'])) {
                    switch($item['route']['allow']) {
                        case true:
                            return true;
                        case false:
                            $this->denyAccess($this->user);
                    }
                }
            } else{
                foreach ($item['route']['controllers'] as $controller) {
                    if (StringHelper::matchWildcard($this->currentClassController, $controller['controller']))
                        if ($this->permissionService->checkAccess($item['rule'])) {
                            switch($controller['allow']) {
                                case true:
                                    return true;
                                case false:
                                    $this->denyAccess($this->user);
                            }
                        }
                }
            }
        }

        $this->denyAccess($this->user);
    }
}
